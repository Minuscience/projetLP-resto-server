Create migrations momands

php artisan make:migration create_dish_table
php artisan make:migration create_client_table
php artisan make:migration create_order_table
php artisan make:migration create_order_line_table

=====================================================
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

Schema::create('dish', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->text('description');
    $table->double('price');
    $table->int('calories');
    $table->string('proteins');
    $table->string('carbs');
    $table->string('imageURL');
    $table->timestamps();
});

Schema::create('client', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->string('firstName');
    $table->string('lastName');
    $table->string('email');
    $table->date('dateOfBirth');
    $table->boolean('extraNapkins');
    $table->boolean('frequentRefill');
    $table->timestamps();
});

Schema::create('order', function (Blueprint $table) {
    $table->id();
    $table->dateTime('dateOrder');
    $table->double('totalPrice');
    $table->int('idClient');
    $table->timestamps();
});

Schema::create('order', function (Blueprint $table) {
    $table->id();
    $table->dateTime('dateOrder');
    $table->double('totalPrice');
    $table->int('idClient');
    $table->timestamps();
});



Schema::create('order', function (Blueprint $table) {
    $table->id();
    $table->foreignId('idOrder');
    $table->foreignId('idDish');
    $table->timestamps();
});


=============================
class UserTableSeeder extends Seeder {

    public function run()
    {
        DB::table('users')->insert([
            'name' => Str::random(10),
            'email' => Str::random(10).'@gmail.com',
            'password' => Hash::make('password'),
        ]);
    }
}

class UserTableSeeder extends Seeder {

    public function run()
    {
    $dish1 = Dish::firstOrCreate(array(
            'name' => 'Trader Joe\'s Egg (Brown/White)',
            'description' => 'classic egg plate',
            'price' => 12,30,
            'calories' => '200',
            'proteins' => '3',
            'carbs' => '',
            'imageURL'=>
        ));

        if (!$breakfast->foodItems->contains($eggItem)) {
            $breakfast->foodItems()->attach($eggItem);
        }

        $hummusItem = FoodItem::firstOrCreate(array(
            'name' => 'Trader Joe\'s Chunky Olive Hummus',
            'portion' => '2',
            'unit' => 'tablespoons',
            'calories' => '80',
            'image' => '/img/food/hummus.jpg',
            'is_condiment' => true
        ));

        $greekSalladItem = FoodItem::firstOrCreate(array(
            'name' => 'Trader Joe\'s Classic Greek Salad (With Dressing)',
            'portion' => '1',
            'unit' => 'container',
            'calories' => '350',
            'image' => '/img/food/greek_sallad.jpg',
            'is_condiment' => false
        ));

        if (!$lunch->foodItems->contains($greekSalladItem)) {
            $lunch->foodItems()->attach($greekSalladItem);
        }

        $greekSalladItem2 = FoodItem::firstOrCreate(array(
            'name' => 'Trader Joe\'s Classic Greek Salad (Without Dressing)',
            'portion' => '1',
            'unit' => 'container',
            'calories' => '120',
            'image' => '/img/food/greek_sallad.jpg',
            'is_condiment' => false
        ));

        if (!$lunch->foodItems->contains($greekSalladItem2)) {
            $lunch->foodItems()->attach($greekSalladItem2);
        }
          }
}
